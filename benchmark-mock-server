#!/usr/bin/node

const path = require('path');
const fs = require('fs');
const cluster = require('cluster');
const cpu_num = require('os').cpus().length;

const _ = require('underscore');
const Handlebars = require('handlebars');
const uuidv4 = require('uuid/v4');
const libxmljs = require("libxmljs");

const express = require('express');
const bodyParser = require('body-parser');

const mock_app = express();
mock_app.use(bodyParser.json());
mock_app.use(bodyParser.urlencoded({
	extended: true
}));
const admin_app = express();
admin_app.use(bodyParser.json());
admin_app.use(bodyParser.urlencoded({
	extended: true
}));

class MappingExpector {
	constructor(req_cfg) {
		this.cfg = req_cfg;
	}

	check(req) {
		// console.log(`${this.cfg.urlPath} ${req.path} ${this.cfg.urlPath != req.path}`);
		if (this.cfg.urlPath && this.cfg.urlPath != req.path) {
			return false;
		}
		if (this.cfg.urlPathPattern && this.cfg.urlPathPattern != req.path) {
			if (!new RegExp(this.cfg.urlPathPattern).test(req.path)) {
				return false;
			}
		}
		if (this.cfg.method && this.cfg.method.toLowerCase() != req.method.toLowerCase()) {
			return false;
		}
		return true
	}
}

class RequestContext {
	constructor(req, res) {
		this.request = req;
		this.response = res;
		this.timestamp = Date.now();
	}

	save_response_status(status) {
		this.status = status;
	}

	end() {
		console.log(`${this.status} ${this.request.method} ${this.request.path} ${Date.now() - this.timestamp}ms`);
	}
}

class Mapping {
	constructor(cfg, cfg_dir_path) {
		this.cfg = cfg;
		this.expect = new MappingExpector(cfg.request);
		if (cfg.response.body[0] == '@') {
			cfg.response.body = fs.readFileSync(cfg_dir_path + '/' + cfg.response.body.substr(1)).toString();
		}
		this.cfg.response.template = Handlebars.compile(cfg.response.body);
		if (cfg.response.probabilities) {
			_.each(cfg.response.probabilities, (probalibity) => {
				probalibity.template = Handlebars.compile(probalibity.body);
			});
		}
	}

	_build_template_context(req) {
		return {
			request: {
				url: req.url,
				requestLine: {
					path: req.path,
					method: req.method
				},
				body: JSON.stringify(req.body)
			}
		};
	}

	check(req) {
		return this.expect.check(req);
	}

	answer(context) {
		let probability_value = Math.random();
		if (this.cfg.response.probabilities) {
			for (var i = 0; i < this.cfg.response.probabilities.length; i++) {
				let probability = this.cfg.response.probabilities[i];
				if (probability_value <= probability.probability) {
					this.answer_with(context, probability);
					return;
				}
			}
		}
		this.answer_with(context, this.cfg.response);
	}

	answer_with(context, res_cfg) {
		if (res_cfg.fixedDelayMilliseconds) {
			setTimeout(((req, res) => {
				this.answer_response(context, res_cfg);
			}).bind(this), res_cfg.fixedDelayMilliseconds);
		} else {
			this.answer_response(context, res_cfg);
		}
	}

	answer_response(context, res_cfg) {
		let req = context.request;
		let res = context.response;
		let status_code = 200;
		try {
			if (res_cfg.status) {
				status_code = res_cfg.status;
			}
			res.status(status_code);
			context.save_response_status(status_code);
			if (res_cfg.headers) {
				res.set(res_cfg.headers);
			}
			this.answer_body(context, res_cfg);
			return status_code;
		} finally {
			context.end();
		}
	}

	answer_body(context, res_cfg) {
		let response = res_cfg.template(this._build_template_context(context.request));
		context.response.send(response);
	}
}

class Mock {
	constructor() {
		this.cfg_dir_path = __dirname + "/mappings";
		this.mappings = [];
		this._register_helper();
		this.load_configs();
	}

	_register_helper() {
		Handlebars.registerHelper('jsonPath', (jsonbody, path) => {
			let jsonobject = JSON.parse(jsonbody);
			let tokens = path.split(/\]?[\.\[]/);
			let current = null;
			for (let i = 0, length1 = tokens.length; i < length1; i++) {
				let token = tokens[i];
				if (i == 0 && token != '$') {
					throw new Handlebars.Exception('json path must start with $');
				}
				if (token == '$') {
					current = jsonobject;
				} else if (_.isArray(current)) {
					current = current[parseInt(token)];
				} else {
					current = current[token];
				}
			}
			return new Handlebars.SafeString(current);
		});
		Handlebars.registerHelper('uuid', () => {
			return new Handlebars.SafeString(uuidv4());
		});
		Handlebars.registerHelper('xPath', (xmlbody, xpath) => {
			var xmlDoc = libxmljs.parseXml(xml);
			return new Handlebars.SafeString(xmlDoc.get(xpath).toString());
		});
	}

	_load_config(cfg_path) {
		try {
			if (!/\.cfg$/.test(cfg_path)) {
				console.log(`Skip ${cfg_path}, only read *.cfg`);
				return;
			}
			let cfg = JSON.parse(fs.readFileSync(this.cfg_dir_path + '/' + cfg_path));
			this.mappings.push(new Mapping(cfg, this.cfg_dir_path));
			console.log(`Found mapping ${cfg_path}`);
		} catch (e) {
			console.log(`Failed to load mapping ${cfg_path}: ${e.stack}`);
		}
	}

	load_configs() {
		this.mappings = [];
		let files = fs.readdirSync(this.cfg_dir_path);
		_.each(files, this._load_config.bind(this));
	}

	_build_request_context(req, res) {
		return new RequestContext(req, res);
	}

	handle_request(req, res) {
		let context = this._build_request_context(req, res);
		try {
			for (let i = 0, length = this.mappings.length; i < length; i++) {
				let mapping = this.mappings[i];
				if (mapping.check(req)) {
					mapping.answer(context);
					return;
				}
			}
			this.handle_404(context);
		} catch (e) {
			this.handle_500(context, e);
		}
	}

	handle_404(context) {
		try {
			context.save_response_status(404);
			context.response.status(404).send(`404 Not Found: ${context.request.method} ${context.request.path}`);
		} finally {
			context.end();
		}
	}

	handle_500(context, e) {
		try {
			context.save_response_status(500);
			context.response.status(500).send(`500 Internal Error: ${context.request.method} ${context.request.path} ${e.stack}`);
		} finally {
			context.end();
		}
	}
}

if (cluster.isMaster) {
	console.log(`Master ${process.pid} is running`);

	// Fork workers.
	let workers = [];
	for (let i = 0; i < cpu_num * 2; i++) {
		workers.push(cluster.fork());
	}

	cluster.on('exit', (worker, code, signal) => {
		console.log(`worker ${worker.process.pid} died`);
		workers.push(cluster.fork());
	});

	admin_app.get('/', (req, res) => {
		res.send('It works.');
	});
	admin_app.get('/reload', (req, res) => {
		_.each(workers, (worker) => {
			worker.send({
				cmd: 'reload'
			});
		});
		res.send('OK');
	});
	admin_app.listen(3001);
} else {
	console.log(`Slave ${process.pid} is running`);

	const mock = new Mock();
	mock_app.all(/.*/, (req, res) => {
		mock.handle_request(req, res);
	});

	mock_app.listen(3000);

	process.on('message', (msg) => {
		if (msg.cmd == 'reload') {
			mock.load_configs();
			console.log(`Worker: ${process.pid} reload all configs.`);
		}
	});
}